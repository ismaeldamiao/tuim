name: Build and test
on: [push, pull_request]

jobs:
  posix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        c_compiler: [gcc, clang]
    steps:
      - uses: actions/checkout@v4
      - name: Build Interpreter
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          cd interfaces
          mkdir bin
          export CC=${{ matrix.c_compiler }}
          exec ${CC} -o bin/tuim -D _POSIX_C_SOURCE=200809L src/main.c
  windows:
    runs-on: ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - amd64_x86
          - amd64_arm64
        os: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Developer Command Prompt (amd64)
        uses: ./
        with:
          arch: amd64
      - name: Compile and run some C code (amd64)
        shell: cmd
        run: |
          cl.exe hello.c
          hello.exe
      - name: Enable Developer Command Prompt (amd64_x86)
        uses: ./
        with:
          arch: amd64_x86
      - name: Compile and run some C code (x86)
        shell: cmd
        run: |
          cl.exe hello.c
          hello.exe
      - name: Enable Developer Command Prompt (amd64_arm)
        uses: ./
        with:
          arch: amd64_arm
      - name: Compile some C code
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Build Interpreter
        working-directory: ${{ github.workspace }}
        run: |
          cd interfaces
          md bin
          cl src/main.c /link /out:bin/tuim.exe
#    - name: Archive output
#      uses: actions/upload-artifact@v4
#      with:
#        name: build-${{ matrix.os }}-${{ matrix.c_compiler }}
#        path: ${{ github.workspace }}/build.zip
